generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  name              String?
  email             String?           @unique
  password          String?
  phone             String?           @unique
  kakao_id          String?           @unique
  avatar            String?
  avatar_thumb      String?
  ad_agree          Boolean
  isSeller          Boolean           @default(false)
  smsToken_forEmail SMSTokenForEmail?
  smsToken_forPw    SMSTokenForPw?
  farms             Farm[]
  addresses         DeliveryAddress[]
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model Farm {
  id             Int       @id @default(autoincrement())
  name           String
  businessNumber String
  products       Product[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  phone      String   @unique
  isVerified Boolean  @default(false)
  count      Int      @default(0)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SMSTokenForEmail {
  id         Int      @id @default(autoincrement())
  isVerified Boolean  @default(false)
  count      Int      @default(0)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
}

model SMSTokenForPw {
  id         Int      @id @default(autoincrement())
  isVerified Boolean  @default(false)
  count      Int      @default(0)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
}

model DeliveryAddress {
  id            Int      @id @default(autoincrement())
  name          String
  phone         String
  zipCode       String
  address       String
  detailAddress String
  memo          String?
  isDefault     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
}

model Product {
  id                Int             @id @default(autoincrement())
  title             String
  photo             String[]
  description       String
  final_description String?
  startDate         DateTime
  endDate           DateTime?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  farm              Farm            @relation(fields: [farmId], references: [id], onDelete: Cascade)
  farmId            Int             @default(1)
  options           ProductOption[]
}

model ProductOption {
  id          Int      @id @default(autoincrement())
  title       String
  price       Int
  discount    Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}
