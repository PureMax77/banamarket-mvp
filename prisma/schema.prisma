generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  name              String?
  email             String?           @unique
  password          String?
  phone             String?           @unique
  kakao_id          String?           @unique
  avatar            String?
  avatar_thumb      String?
  ad_agree          Boolean
  isSeller          Boolean           @default(false)
  
  // 판매자 계좌 정보 (직접 필드로 저장)
  bankType          String?           // 은행 코드
  accountNumber     String?           // 계좌번호
  accountHolder     String?           // 예금주
  
  smsToken_forEmail SMSTokenForEmail?
  smsToken_forPw    SMSTokenForPw?
  farms             Farm[]
  addresses         DeliveryAddress[]
  orders            Order[]
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model Farm {
  id             Int       @id @default(autoincrement())
  name           String
  businessNumber String
  products       Product[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  phone      String   @unique
  isVerified Boolean  @default(false)
  count      Int      @default(0)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SMSTokenForEmail {
  id         Int      @id @default(autoincrement())
  isVerified Boolean  @default(false)
  count      Int      @default(0)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
}

model SMSTokenForPw {
  id         Int      @id @default(autoincrement())
  isVerified Boolean  @default(false)
  count      Int      @default(0)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
}

model DeliveryAddress {
  id            Int      @id @default(autoincrement())
  name          String
  phone         String
  zipCode       String
  address       String
  detailAddress String
  memo          String?
  isDefault     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
}

model Product {
  id                Int             @id @default(autoincrement())
  title             String
  photo             String[]
  description       String
  final_description String?
  startDate         DateTime
  endDate           DateTime?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  farm              Farm            @relation(fields: [farmId], references: [id], onDelete: Cascade)
  farmId            Int             @default(1)
  options           ProductOption[]
  orders            Order[]
}

model ProductOption {
  id             Int           @id @default(autoincrement())
  title          String
  price          Int
  discount       Int           @default(0)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
  orderOptions   OrderOption[]
}

enum OrderStatus {
  PENDING_PAYMENT   // 입금 대기
  PREPARING        // 상품 준비중
  SHIPPING         // 배송중
  DELIVERED        // 배송 완료
  CANCELED         // 주문 취소
  REFUNDED         // 환불 완료
}

model Order {
  id                Int              @id @default(autoincrement())
  orderNumber       String           @unique // 주문번호 (예: 20230615-123456)
  totalAmount       Int              // 총 주문 금액
  status            OrderStatus      @default(PENDING_PAYMENT)
  paymentMethod     String           @default("BANK_TRANSFER") // 결제 방법 (현재는 계좌이체만 지원)
  depositorName     String           // 입금자명
  isPaid            Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  
  // 관계
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  
  // 상품 정보
  product           Product          @relation(fields: [productId], references: [id])
  productId         Int
  
  // 주문 옵션 정보
  orderOptions      OrderOption[]
  
  // 주문 시점의 배송지 정보 (스냅샷)
  dName             String           // 받는 사람 이름
  dPhone            String           // 받는 사람 전화번호
  dZipCode          String           // 우편번호
  dAddress          String           // 주소
  dDetailAddress    String           // 상세주소
  dMemo             String?          // 배송 메모

  // 주문 시점의 계좌 정보 (스냅샷)
  bankType          String           // 은행 코드
  accountNumber     String           // 계좌번호
  accountHolder     String           // 예금주
}

model OrderOption {
  id                Int            @id @default(autoincrement())
  quantity          Int            // 선택한 옵션의 수량
  price             Int            // 구매 당시 가격 (기록용)
  optionTitle       String         // 옵션 제목 (스냅샷)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // 관계
  order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           Int
  
  productOption     ProductOption  @relation(fields: [productOptionId], references: [id])
  productOptionId   Int
}
